#!/usr/bin/ucode
// SPDX-License-Identifier: MIT
// SPDX-FileCopyrightText: 2021-2023 John Crispin <john@phrozen.org>
// SPDX-FileCopyrightText: 2023-2024 Thibaut Var√®ne <hacks@slashdirt.org>

'use strict';

import { basename, popen } from 'fs';
import * as ubus from 'ubus';
import * as uloop from 'uloop';
import { ulog_open, ULOG_SYSLOG, LOG_DAEMON, NOTE, INFO } from 'log';

let defaults = {};
let devices = {};

// setup logging
ulog_open(ULOG_SYSLOG, LOG_DAEMON, "ratelimit");

function load_config() {
	let uci = require('uci').cursor();

	let uciload = uci.foreach('ratelimit', 'rate', (d) => {
		let name = d.name;
		let ingress = d.ingress;
		let egress = d.egress;

		if (!name || (!ingress && !egress))
			return;

		defaults[name] = [ egress, ingress ];
	});
}

function cmd(command, ignore_error) {
//	if (ignore_error)
//		command += "> /dev/null 2>&1";
	warn(`> ${command}\n`);
	let rc = system(command);
	return ignore_error || rc == 0;
}

function qdisc_add_leaf(iface, id, opts) {
	opts ??= "";
	return cmd(`tc class replace dev ${iface} parent 1:1 classid 1:${id} htb rate 1mbit ${opts} burst 2k prio 1`) &&
	       cmd(`tc qdisc replace dev ${iface} parent 1:${id} handle ${id}: fq_codel flows 128 limit 800 quantum 300 noecn`);
}

function qdisc_del_leaf(iface, id) {
	cmd(`tc class del dev ${iface} parent 1:1 classid 1:${id}`, true);
}

function qdisc_add(iface) {
	return cmd(`tc qdisc add dev ${iface} root handle 1: htb default 2`) &&
	       cmd(`tc class add dev ${iface} parent 1: classid 1:1 htb rate 1000mbit burst 6k`) &&
	       qdisc_add_leaf(iface, 2, "ceil 1000mbit");
}

function qdisc_del(iface) {
	cmd(`tc qdisc del dev ${iface} root`, true);
}

function ifb_dev(iface) {
	return "ifb-" + substr(iface, -11);	// netdev names max at 15 chars
}

function ifb_add(iface, ifbdev) {
	return cmd(`ip link add ${ifbdev} type ifb`) &&
	       cmd(`ip link set ${ifbdev} up`) &&
	       cmd(`tc qdisc add dev ${iface} clsact`, true) &&
	       cmd(`tc filter add dev ${iface} ingress protocol all prio 512 matchall action mirred egress redirect dev ${ifbdev}`);
}

function ifb_del(iface, ifbdev) {
	cmd(`tc filter del dev ${iface} ingress protocol all prio 512`);
	cmd(`ip link set ${ifbdev} down`, true);
	cmd(`ip link del ${ifbdev}`, true);
}

function macfilter_add(iface, id, type, mac) {
	return cmd(`tc filter add dev ${iface} protocol all parent 1: prio 1 handle 800::${id} u32 match ether ${type} ${mac} flowid 1:${id}`);
}

function macfilter_del(iface, id) {
	cmd(`tc filter del dev ${iface} protocol all parent 1: prio 1 handle 800::${id} u32`, true);
}

function linux_client_del(device, client) {
	let ifbdev = ifb_dev(device.name);
	let id = client.id + 3;

	if (client.data?.rate_egress) {
		macfilter_del(device.name, id);
		qdisc_del_leaf(device.name, id);
	}
	if (client.data?.rate_ingress) {
		macfilter_del(ifbdev, id);
		qdisc_del_leaf(ifbdev, id);
	}
}

function linux_client_set(device, client) {
	let ifbdev = ifb_dev(device.name);
	let id = client.id + 3;

	linux_client_del(device, client);

	let ret = true;
	if (client.data?.rate_egress) {
		ret &= qdisc_add_leaf(device.name, id, `ceil ${client.data.rate_egress}`);
		ret &= macfilter_add(device.name, id, "dst", client.address);
	}
	if (client.data?.rate_ingress) {
		ret &= qdisc_add_leaf(ifbdev, id, `ceil ${client.data.rate_ingress}`);
		ret &= macfilter_add(ifbdev, id, "src", client.address);
	}

	if (!ret)
		linux_client_del(device, client);

	return ret;
}


let ops = {
	device: {
		add: function(name) {
			let ifbdev = ifb_dev(name);

			qdisc_del(name);
			ifb_del(name, ifbdev);

			let ret = qdisc_add(name) &&
				  ifb_add(name, ifbdev) &&
				  qdisc_add(ifbdev);

			if (!ret) {
				qdisc_del(name);
				ifb_del(name, ifbdev);
			}

			return ret;
		},
		remove: function(name) {
			let ifbdev = ifb_dev(name);
			qdisc_del(name);
			ifb_del(name, ifbdev);
		}
	},
	client: {
		set: function(device, client) {
			return linux_client_set(device, client);
		},
		remove: function(device, client) {
			linux_client_del(device, client);
		}
	}
};

function get_device(devices, name) {
	let device = devices[name];

	if (device)
		return device;

	if (!ops.device.add(name))
		return null;

	device = {
		name: name,
		clients: {},
		client_order: [],
	};

	devices[name] = device;

	return device;
}

function del_device(name) {
	if (!devices[name])
		return;
	ops.device.remove(name);
	delete devices[name];
	INFO(`clearing device ${name}`);
}

function get_free_idx(list) {
	for (let i = 0; i < length(list); i++)
		if (list[i] == null)
			return i;

	return length(list);
}

function del_client(device, address) {
	let client = device.clients[address];

	if (!client)
		return false;

	delete device.clients[address];
	device.client_order[client.id] = null;

	ops.client.remove(device, client);

	INFO(`clearing ${address}`);

	return true;
}

function get_client(device, address) {
	let client = device.clients[address];

	if (client)
		return client;

	let i = get_free_idx(device.client_order);
	client = {};
	client.address = address;
	client.id = i;
	client.data = {};

	device.clients[address] = client;
	device.client_order[i] = client;

	return client;
}

function set_client(device, client, data) {
	let update = false;

	for (let key in data) {
		if (client.data[key] != data[key])
			update = true;

		client.data[key] = data[key];
	}

	if (update && !ops.client.set(device, client)) {
		// try to reset the device - work around ifup/down while ratelimit is running
		if (ops.device.add(device.name) && ops.client.set(device, client))
			return true;
		del_client(device, client.address);
		return false;
	}

	let log = `setting ${client.address}`;
	if (data.rate_egress)
		log += ` e:${data.rate_egress}`;
	if (data.rate_ingress)
		log += ` i:${data.rate_ingress}`;
	INFO(log);

	return true;
}

// provide handler to reload all clients (e.g. after ifdown/up)
function reload_tc() {
	for (let name, device in devices) {
		if (!ops.device.add(name))
			continue;
		for (let address, client in device.clients)
			ops.client.set(device, client);
	}
}

function run_service() {
	let uctx = ubus.connect();

	uctx.publish("ratelimit", {
		defaults_set: {
			call: function(req) {
				let r_i = req.args.rate_ingress ?? req.args.rate;
				let r_e = req.args.rate_egress ?? req.args.rate;
				let name = req.args.name;

				if (!name || (!r_i && !r_e))
					return ubus.STATUS_INVALID_ARGUMENT;

				defaults[name] = [ r_e, r_i ];

				return 0;
			},
			args: {
				name:"",
				rate:"",
				rate_ingress:"",
				rate_egress:"",
			}
		},
		client_set: {
			call: function(req) {
				let r_i = req.args.rate_ingress ?? req.args.rate;
				let r_e = req.args.rate_egress ?? req.args.rate;
				let address = req.args.address;

				if (req.args.defaults && defaults[req.args.defaults]) {
					let def = defaults[req.args.defaults];

					r_e ??= def[0];
					r_i ??= def[1];
				}

				if (!req.args.device || !address || (!r_i && !r_e))
					return ubus.STATUS_INVALID_ARGUMENT;

				let device = get_device(devices, req.args.device);
				if (!device)
					return ubus.STATUS_INVALID_ARGUMENT;

				let client = get_client(device, address);
				if (!client)
					return ubus.STATUS_INVALID_ARGUMENT;

				let data = {
					rate_ingress: r_i,
					rate_egress: r_e
				};

				if (!set_client(device, client, data))
					return ubus.STATUS_UNKNOWN_ERROR;

				return 0;
			},
			args: {
				device:"",
				defaults:"",
				address:"",
				rate:"",
				rate_ingress:"",
				rate_egress:"",
			}
		},
		client_delete: {
			call: function(req) {
				let address = req.args.address;

				if (!address)
					return ubus.STATUS_INVALID_ARGUMENT;

				if (req.args.device) {
					let device = devices[req.args.device];
					if (!device)
						return ubus.STATUS_NOT_FOUND;

					if (!del_client(device, address))
						return ubus.STATUS_NOT_FOUND;
				} else {
					for (let dev in devices) {
						let device = devices[dev];

						del_client(device, address);
					}
				}

				return 0;
			},
			args: {
				device:"",
				address:"",
			}
		},
		device_delete: {
			call: function(req) {
				let name = req.args.device;

				if (!name)
					return ubus.STATUS_INVALID_ARGUMENT;

				if (!devices[name])
					return ubus.STATUS_NOT_FOUND;

				del_device(name);

				return 0;
			},
			args: {
				device:"",
			}
		},
		reload: {
			call: function(req) {
				reload_tc();
				NOTE("reloading rules");
				return 0;
			},
			args: {
			}
		}
	});

	try {
		uloop.run();
	} catch (e) {
		warn(`Error: ${e}\n${e.stacktrace[0].context}`);
	}

	for (let dev in devices) {
		del_device(dev);
	}
}

load_config();
uloop.init();
run_service();
uloop.done();
